javascript:
  $(function() {
    window.environment = '#{Rails.env}';
    var log = function(msg) {
      if (window.environment != 'production') {
        console.log(msg);
      }
    }

    window.development = function() { window.environment = 'development'; }

    var reload = function() { window.location.reload(); }
    var refresh_to = parseInt('#{dashboard.refresh_to}');

    var reload_timer = #{dashboard.refresh.to_i * 1000};
    
    var reload_countdown_width = 100;

    var counter_timeout = reload_timer / reload_countdown_width;

    if (reload_timer > 0) {
      setInterval(function() {
        reload_countdown_width = reload_countdown_width -1;
        $('.reload-countdown').css('width', reload_countdown_width + "%")
      }, counter_timeout);

      setInterval(function() {
        if (refresh_to > 0) {
          window.location.href="/dashboard/" + refresh_to;
        } else {
          reload();
        }
      }, reload_timer);
    }

    $('.remove-cell.true').on('click', function(event) {
      var cell_id = $(this).closest('.visualization-cell').data('cell-id');

      if (confirm('Remove this cell?')) {
        $.post('#{remove_visualization_dashboard_path(dashboard)}', { dashboard_cell_id: cell_id })
        .done(function() { reload(); })
        .fail(function(d,e,j) { alert(d.responseText); });
      }
    });

    var reloadDashboard = function() {
      // we could have called reload() directly, but this give us room to grow.
      if (window.ignoreNextDashboardReload) {
        log('Ignoring this dashboard reload request.');
        window.ignoreNextDashboardReload = false;
      } else {
        log('Reloading current dashboard');
        reload();
      }
    };

    var reloadCell = function(cell_id) {
      var vc = $('#vc_' + cell_id);
      if (vc.length > 0) {
        var slug = vc.data('slug');
        log('Reloading cell ' + slug + '(' + cell_id + ')');
        var visualization_el = $(vc).find('.visualization');
        visualization_el.hide('blind', { direction: 'up' }, 1000, function() {
          var trigger_name = 'tf_refresh_' + slug;
          log("triggering event " + trigger_name);
          $(document).trigger(trigger_name);
          visualization_el.show('blind', { direction: 'up' }, 1000);
        });
      
      } else {
       log('No cell with id ' + cell_id + ' was found on page');
     }
    };

    $('.reload-cell.true').on('click', function(event) {
      var cell = $(this).closest('.visualization-cell');
      reloadCell(cell.data('cell-id'));
    });

    $('.popup.true').on('click', function(event) {
      event.preventDefault();
      var selector = $(this).data('selector');
      var el = $('.popups').find(selector);
      var title = el.find('title').text();
      el.dialog(
        {
          title: title,
          resizable: false,
          draggable: false,
          modal: true,
          width: 370,
          show: { effect: 'slideDown', duration: 250 },
          hide: { effect: 'slideUp', duration: 250 },
          close: function (event, ui) {
            $(this).dialog("destroy"); // so the dialog will open again
          }
        }
      );
    });

    $('.popups .add-visualization form').on('submit', function(event) {
      event.preventDefault();
      var visualization_id = $(this).find('select').val();
      if (visualization_id.toString().length < 1) {
        alert('Select a visualization first');
        return false;
      }
      return true;
    });

    $('.popups .add-visualization form').bind('ajax:complete', function(e) {
      reload();
    });

    $('.popups .dashboard-settings form').bind('ajax:complete', function(e) {
      reload();
    });

    var markAutoScrollingElements = function() {
      $('.dashboard .visualization-cell.allow-autoscroll').each(function(index, el) {
        var container = $(el).find('div.container');
        if (container.css('height') > $(el).css('height')) {
          $(el).addClass('do-scrolling');
          present = true;
        }
      });
    }

    var scrollersArePresent = function() {
      markAutoScrollingElements();
      return($('.dashboard .visualization-cell.do-scrolling').length > 0);
    };

    var autoScroll = function(el, scroll_delay) {
      if (!$(el).data('stopped')) {
        var direction = $(el).data('direction') || 'down';
        if (direction == 'down') {
          if ($(el).scrollTop() < ($(el).find('.container').height() - $(el).height())) {
            $(el).scrollTop($(el).scrollTop()+1);
          } else {
            $(el).data('direction', 'up');
          }
        } else {
          if ($(el).scrollTop() > 0 ) {
            $(el).scrollTop($(el).scrollTop()-1);
          } else {
            $(el).data('direction', 'down');
          }
        }
      }
      setTimeout(function(){ autoScroll(el, scroll_delay); }, scroll_delay);
    };

    var startAutoScroll = function() {
      if (scrollersArePresent()) {
        log('Beginning autoscroll');
        $('.visualization-cell.do-scrolling').each(function(index, el) {
          var scroll_delay = $(el).data('autoscroll-delay');
          log("Autoscroll delay:" + scroll_delay);
          autoScroll(el, parseInt(scroll_delay || 1000));
        });

        $('.visualization-cell.do-scrolling').on('mouseenter', function(event) {
          $(this).data('stopped', true);
          $(this).scrollTop('0');
        });

        $('.visualization-cell.do-scrolling').on('mouseleave', function(event) {
          $(this).data('stopped', false);
        });
      } else {
        log('No divs found that need autoscrolling');
      }
    };

    // start autoscrolling after the grid contents have had time to load.
    // That may take a while on slow machines like the Raspi.
    setTimeout(function() { startAutoScroll() }, 10000);

    var autoRefreshCellsArePresent = function() {
      return($('.dashboard .allow-auto-refresh').length > 0);
    };

    var startAutoRefresh = function() {
      if (autoRefreshCellsArePresent()) {
        var cell_ids = [];
        $('.dashboard .allow-auto-refresh').each(function(index, el) {
          cell_ids.push($(el).data('cell-id'));
        });
        log('Beginning auto-refresh poller for ' + cell_ids.join(', '));
        autoRefresh(cell_ids, default_autorefresh_delay);
      } else {
        log('No divs found that need automatic refreshing');
      }
    };

    var default_autorefresh_delay = 15000; // milliseconds
    var last_refresh_since = #{Time.now.to_i};
    // TODO: turn this into something that will extend the interval when the
    // $.get() receives an error.
    var autoRefresh = function(cell_ids, delay) {
      var url = [
        '/dashboards/#{dashboard.id}/updates?since=',
        last_refresh_since,
        '&nocache=',
        (new Date()).getTime().toString()
      ].join('');
      $('.heartbeat').addClass('beating');
      log('--- POLLING CYCLE BEGIN ---');
      log('Polling server with url: ' + url);
      $.get(url).done(function(returned_data) {
        if (delay > default_autorefresh_delay) {
          log('resetting delay to default');
          delay = default_autorefresh_delay;
        }
        var response = JSON.parse(returned_data);
        log(response);
        last_refresh_since = response.next_since
        if (response.update.cells.length > 0) {
          updateCells(response.update.cells);
        } else {
          log('No cells need to be updated');
        }

        if (response.update.dashboard) {
          reloadDashboard();
        } else {
          log('Do not need to refresh dashboard');
        }

      }).fail(function(d,e,j) {
        console.log('Error polling: ' + e)
        console.log(d);
        if (delay < (default_autorefresh_delay*10)) {
          delay = delay + 1000;
          log('Increasing polling delay to ' + delay.toString());
        } else {
          log('Polling delay is already at maximum: ' + delaytoString());
        }
        addFlashNotice('Error reading update from server. Trying again in ' + delay.toString() + ' milliseconds.');
      }).always(function() {
        setTimeout(function() {
          $('.heartbeat').removeClass('beating');
        }, 2000); // let people see the change before removing it

        setTimeout( function() {
          autoRefresh(cell_ids, delay);
        }, delay);

        log("--- POLLING CYCLE END -----\n");
      });
    };

    var updateCells = function(cell_ids) {
      for (var index in cell_ids) {
        updateCell(cell_ids[index]);
      }
    };

    var updateCell = function(cell_id) {
      log("Auto-refreshing cell " + cell_id);
      reloadCell(cell_id);
    };

    // start auto-refresh after the grid contents have had time to load.
    // That may take a while on slow machines like the Raspi.
    setTimeout(function() { startAutoRefresh() }, 5000);

    // resize any iframes present to take up the while cell.
    var resizeIframes = function() {
      $('.visualization-cell iframe').each(function(index, el) {
        var vc = $(el).closest('.visualization-cell');
        var container_height = vc.height();
        var container_width = vc.width();
        var iframeAdjustRegex = new RegExp("(midori|luakit)", 'i');
        if (iframeAdjustRegex.exec(navigator.userAgent)) {
          // change iframe height in these browsers
          container_height = container_height - 50;
        }
        log('Resizing iframe ' + $(el).attr('src') + ' to ' + container_height-5 + 'h/' + container_width-5 + 'w:');
  
        $(el).height(container_height);
        $(el).width(container_width);
      });
    }

    // call resizeIframes in a timer to allow gridster to load first.
    setTimeout(resizeIframes, 30000);

    var syncGridsterChangesToServer = function() {
      if (#{!logged_in?}) {
        alert('Please log in to do this!');
        reload();
        return;
      }

      // so we don't get a refresh while *we're* making the changes.
      window.ignoreNextDashboardReload = true;

      var objects = gridster.serialize();
      var done_count = 0;
      for (var index in objects) {
        var object = objects[index];
        var cell_id = object.el.data('cell-id');
        var data = {
          column: object.col,
          row: object.row,
          width: object.size_x,
          height: object.size_y,
        }
        $.post('/dashboard_cells/' + cell_id, data)
          .fail(function(d,e,j) { alert(d.responseText); });
      }
    };

    gridsterStartChanging = function() {
      log('gridsterStartChanging');
      $('.gridster').addClass('changing');
    };

    gridsterStopChanging = function() {
      log('gridsterStopChanging');
      $('.gridster').removeClass('changing');
    };

    gridster = $(".gridster .dashboard").gridster({
      widget_margins: [#{dashboard.cell_x_margin}, #{dashboard.cell_y_margin}],
      widget_base_dimensions: [#{dashboard.cell_width}, #{dashboard.cell_height}],
      autogrow_cols: #{dashboard.maximum_width.blank?},
      #{dashboard.maximum_width? ? "max_cols: #{dashboard.maximum_x_cells}," : nil }
      // gridster doesn't seem to have a coresponding max_rows option, sadly.
      //autogrow_rows: #{dashboard.maximum_height.blank?},
      draggable: {
        start: gridsterStartChanging, 
        stop: function(event, ui){
          gridsterStopChanging();
          syncGridsterChangesToServer();
        }
      },
      resize: {
        enabled: true,
        start: gridsterStartChanging,
        stop: function(e, ui, wdgt) {
          gridsterStopChanging();
          syncGridsterChangesToServer();
        }
      },

      serialize_params: function($w, wgd) {
        return { el: wgd.el, col: wgd.col, row: wgd.row, size_x: wgd.size_x, size_y: wgd.size_y }
        }
    }).data('gridster');

    // tell vis cells to load
    (function() {
      log("triggering tf_ready");
      $(document).trigger('tf_ready');
    })();

  });

scss:
  .gridster.changing {
    border: 1px solid red;
    box-sizing: border-box;
  }

  ul.dashboard {
    list-style-type: none;
    li {
      border: 1px solid #1e1e1e;
      overflow: hidden;
    }
  } 

  .visualization-cell {
    .controls {
      display: none;
      position: absolute;
      right:3px;
      top:3px;
      z-index: 1;

      i {
        margin: 0 3px 0 3px;
        &.true {
          &:hover {
            cursor: pointer;
            color: blue;
          }
        }
        &.false {
          &:hover {
            color: red;
          }
        }
      }
    }
    
    .visualization-placeholder { display: none; }
    &:hover {
      .controls {
        display: block;
        background: grey;
        border-radius: 5px;
      }
      .visualization-placeholder { display: block; }
      .visualization { display: none; }
    }
  }

  .popups {
    display: none;
  }

  .heartbeat {
    position: fixed;
    right:0;
    bottom:0;
    //opacity: 0.30;
    //transition: opacity 1.5s ease;
    i {
      position: fixed;
      right:0;
      bottom:0;
      &.communicating {
        //display: none;
        opacity: 0.0;
        transition: opacity 1.0s ease;
      }
      &.waiting {
        //display: none;
        opacity: 1.0;
        transition: opacity 1.0s ease;
      }
    }
    &.beating {
      i.waiting {
        //display: none;
        opacity: 0.0;
      }
      i.communicating {
        //display: inherit;
        opacity: 1.0;
      }
      // opacity: 1.0;
    }
  }

- content_for :additional_menu do
  li
    a.add.popup.true href="#" data-selector='.add-visualization'
      i.fa.fa-plus
      span Add Visualization
  li
    a.dashboard-settings.popup.true href="#" data-selector='.dashboard-settings'
      i.fa.fa-cog
      span Settings

.heartbeat title="heartbeat, indicates when server is being polled"
  i.fa.fa-heart-o.waiting
  i.fa.fa-heart.communicating
- if dashboard.refresh.to_i > 0
  .reload-countdown
.gridster style="#{dashboard.maximum_width? ? "width: #{dashboard.maximum_width}px;" : nil} #{dashboard.maximum_height? ? "height: #{dashboard.maximum_height}px;" : nil}"
  ul.dashboard data-dashboard-id=dashboard.id
    - counter = 0
    - max_cell_position = dashboard.dashboard_cells.maximum(:position)
    - while dashboard.dashboard_cells.size >= (counter+1)
      - cell = dashboard.dashboard_cells[counter]
      - break if cell.nil?
      - counter += 1
      li.visualization-cell id=cell.div_id class="#{autoscroll_cell?(cell) ? 'allow-autoscroll' : nil} #{cell.auto_refresh? ? 'allow-auto-refresh' : nil}" data-cell-id=cell.id data-row=cell.row data-col=cell.column data-sizex=cell.width data-sizey=cell.height data-autoscroll-delay=(cell.autoscroll_delay || dashboard.autoscroll_delay) data-slug=cell.visualization.slug
        .container title=cell.visualization.name
          .controls
            i.fa.fa-refresh.reload-cell.true title="reload this cell"
            i.fa.fa-arrows.move-cell.true title="drag to move cell"
            i.fa.fa-times.remove-cell.true title="remove this cell"
          .visualization-placeholder
            p PLACEHOLDER FOR MOVING AND RESIZING
          .visualization
            = render inline: cell.interpolated_markup, type: cell.markup_type

.popups    
  .add-visualization
    title Add Visualization
    - if Visualization.enabled.count > 0
      = form_tag add_visualization_dashboard_path(dashboard), remote: true, class: 'pure-form pure-form-aligned'
        fieldset
          .pure-control-group
            = label_tag :visualization_id, "Visualization"
            = select_tag :visualization_id, options_for_select(Visualization.enabled.where(component: false).order('name').map{|v| [v.name, v.id] }), include_blank: true
          .pure-controls
            button type="submit" class="pure-button pure-button-primary" Add
    - else
      - if Visualization.disabled.count > 0
        | No visualizations are enabled! #{link_to 'Please enable some',  visualizations_path}.
      - else
        | No visualizations have been created! #{link_to 'Please make one', new_visualization_path}.

  .dashboard-settings
    title Dashboard Settings
    = form_for(dashboard, remote: true, html: { class: 'pure-form pure-form-aligned' }) do |f|
      = render partial: 'dashboards/form_guts', locals: {f: f }
      
      .pure-controls
        button type="submit" class="pure-button pure-button-primary" Update
